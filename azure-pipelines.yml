name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise, comment out the line below. 
pool: myAgentPool

variables:
  python.version: '3.9.24'  #'3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'myServiceConnection'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test-vm'  # MDE 'test'
  # Web app name
  webAppName: 'myAppli3-AppService'  #TODO MDE
  # userAgent
  userAgent : 'devopsagent'
  # known_host
  known_host : ''
  # SSH public key
  SSH_PUBLIC_KEY: ''


stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 

    
    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
 
 

    # OPTIONAL - This step is needed only 
    # if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it. 
    # Generate an SSH key pair in your local/AZ Cloud shell. 
    # Use the public key in the Terraform VM module. 
    # Install public key and private key file to the pipeline agent, using the task below. 
    # ToDo: Change the inputs value below
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: '$(KNOWN_HOSTS_STRING)' # variable value  # MDE TODO
        sshPublicKey: '$(SSH_PUBLIC_KEY)'            # variable value
        sshKeySecureFile: 'id_rsa' # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file

    - task: DownloadSecureFile@1
      name: udacity_public_key
      displayName: mySecureFile
      inputs:
        secureFile: 'id_rsa'


    #- script: |
    #    echo Installing $(udacity_public_key.secureFilePath) to the trusted CA directory...
    #    sudo chown root:root $(udacity_public_key.secureFilePath)
    #    sudo chmod a+r $(udacity_public_key.secureFilePath)
    #    sudo ln -s $(udacity_public_key.secureFilePath) /home/$(userAgent)/Downloads/


 

    # ToDo: Change the workingDirectory path, as applicable to you
    # Destroy the resources in Azure by running a separate pipeline. 
    # - task: TerraformTaskV3@3
    #   displayName: Terraform destroy
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

#--------------------------------------------#    
    # Postman - Install Newman    
    # ToDo: Update the command and verify the working directory
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: $(System.DefaultWorkingDirectory)
    # Postman Data Validation Test Suite    
    # ToDo: Verify the working directory
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        script: 'newman run TestSuite.Data-Validation.json --reporters cli,junit --reporter-junit-export ./postman_results/TEST-DataValidation.xml'
        ## -e Test.environment.json   # MDE: -e unuseful for my test here
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman Regression Test Suite    
    # ToDo: Verify the working directory
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: 'newman run TestSuite.Regression.json --reporters cli,junit --reporter-junit-export ./postman_results/TEST-Regression.xml'
        ## -e Test.environment.json   # MDE: -e unuseful for my test here
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman - Publish Results 
    # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        searchFolder:     '$(System.DefaultWorkingDirectory)/automatedtesting/postman/postman_results'  # MDE ToDo
        mergeTestResults: true
        testRunTitle:     'Postman Test'  # ToDo

