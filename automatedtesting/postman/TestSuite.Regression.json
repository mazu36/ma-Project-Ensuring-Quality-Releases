{
	"info": {
		"_postman_id": "52d7b543-7259-4954-9bb1-8d79187b830a",
		"name": "Regression MDE",
		"description": "# ðŸ§ª Get started here\n\nThis template helps ensure your API continues to work as expected after updates or changes. It contains sample requests and [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) for a series of tests that validate different aspects of an API, including:\n\n1. **Status code verification:** We'll check if the API returns the expected status codes for various requests, ensuring reliability and proper error handling.\n    \n2. **Status code name verification:** We'll check if the API returns the expected status codes name for various requests, ensuring reliability and proper error handling.\n    \n3. **JSON schema verification:** We'll make sure the JSON response conforms to a specified JSON Schema, ensuring API contracts are honored.\n    \n4. **Response body verification:** We'll validate the structure and content of the response body for accuracy, ensuring the integrity of the data and preventing potential issues downstream.\n    \n5. **Response time verification:** We'll verify that the API's response time is within the acceptable range, providing a smooth user experience and optimizing performance.\n    \n6. **Header verification:** We'll confirm the presence and correct values of specific headers in the response, enabling secure and well-structured communication between your app and its users.\n    \n\n## ðŸ”– **How to use this template**\n\n**Step 1:** Send the sample requests and view the response and test results.\n\n**Step 2:** Replace the sample request URLs with your desired API endpoints.\n\n**Step 3:** Customize the tests in the \"Scripts\" tab if needed. Don't forget to save your changes.\n\n**Step 4:** [Run the collection](https://learning.postman.com/docs/collections/running-collections/intro-to-collection-runs/) by selecting \"Run\".\n\n<img src=\"https://content.pstmn.io/666cfa65-6e00-4308-871b-f831128bc0ac/Y29sbGVjdGlvbi1ydW5uZXItYnV0dG9uLmpwZWc=\" width=\"246\" height=\"102\">\n\n## ðŸ’¡Related templates\n\n[Integration testing](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=fe506090-ca91-4340-bea9-82d2c3d2bb9a&sourceTemplateId=7ab0f80e-a964-46ee-b948-4a4e3a85809c)  \n[Performance testing](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=3302192d-87dd-4612-b381-61894de21203&sourceTemplateId=7ab0f80e-a964-46ee-b948-4a4e3a85809c)  \n[Mock data generation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=da8ceebc-d4da-478c-ab8a-37634faefc74&sourceTemplateId=7ab0f80e-a964-46ee-b948-4a4e3a85809c)  \n[Common API vulnerabilities check](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e1edbae8-6429-453d-890e-00385eea1811&sourceTemplateId=7ab0f80e-a964-46ee-b948-4a4e3a85809c)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "48318753",
		"_collection_link": "https://made78-8520851.postman.co/workspace/Maria-Dejoie's-Workspace~41977823-7be0-468a-81c4-d7d4a169bf74/collection/48318753-52d7b543-7259-4954-9bb1-8d79187b830a?action=share&source=collection_link&creator=48318753"
	},
	"item": [
		{
			"name": "Status code verification",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"foo\": \"bar\"\n}\n"
				},
				"url": {
					"raw": "{{baseAuthorsUrl}}/1",
					"host": [
						"{{baseAuthorsUrl}}"
					],
					"path": [
						"1"
					]
				},
				"description": "The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response."
			},
			"response": []
		},
		{
			"name": "Status code name verification",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Status code name has OK\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseBooksUrl}}/2",
					"host": [
						"{{baseBooksUrl}}"
					],
					"path": [
						"2"
					]
				},
				"description": "The test on this request asserts that the reponse has a \"200 OK\" status.\n\n You can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response."
			},
			"response": []
		},
		{
			"name": "JSON schema response validation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const getData = () => pm.response.json();  ",
							"",
							"// clear collection variable",
							"pm.collectionVariables.unset(\"author_id\");",
							"",
							"// Describe the expected response shape with JSON Schema",
							"// https://json-schema.org/",
							"const expectedSchema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"id\": {",
							"            \"type\": \"integer\"",
							"        },",
							"        \"idBook\": {",
							"            \"type\": \"integer\"",
							"        },",
							"        \"firstName\": {",
							"            \"type\": \"string\"",
							"        },",
							"        \"lastName\": {",
							"            \"type\": \"string\"",
							"        }",
							"    },",
							"    \"required\": [",
							"       // \"id\",",
							"        \"idBook\",",
							"        \"firstName\",",
							"        \"lastName\"",
							"    ]",
							"};",
							"",
							"",
							"// Test that the response matches the expected schema using built-in schema verification",
							"pm.test('response matches JSON schema', () => {",
							"    pm.response.to.have.jsonSchema(expectedSchema);",
							"});",
							"",
							"// Store the new author id for future use in other tests.",
							"//pm.collectionVariables.set(\"author_id\", pm.response.json().id);",
							"pm.collectionVariables.set(\"author_id\", getData().id);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\"    : 100,\n    \"idBook\": 1,\n    \"firstName\": \"Yuval Noah\",\n    \"lastName\": \"Harari\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseAuthorsUrl}}/",
					"host": [
						"{{baseAuthorsUrl}}"
					],
					"path": [
						""
					]
				},
				"description": "This request has a test using Postman's built-in support for JSON Schema verification to ensure that the response data matches the expected shape.\n\nSchema validation can be used to verify your API returns data in the right format, without worrying about the exact values. This might be helpful when testing various inputs for a consistent output format.\n\nLearn more about JSON Schema at [https://json-schema.org](https://json-schema.org/.)."
			},
			"response": []
		},
		{
			"name": "Response body verification",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const getData = () => pm.response.json(); //.data;",
							"",
							"",
							"pm.test(\"Returns an author object\", () => {",
							"    const data = getData();",
							"",
							"    // Check the expected properties exist",
							"    pm.expect(data).to.have.property(\"id\");",
							"    pm.expect(data).to.have.property(\"idBook\");",
							"    pm.expect(data).to.have.property(\"firstName\");",
							"    pm.expect(data).to.have.property(\"lastName\");",
							"",
							"    // Check the values have the expected types",
							"    pm.expect(data.id).to.be.a('number');",
							"    pm.expect(data.idBook).to.be.a('number');",
							"    pm.expect(data.firstName).to.be.a('string');",
							"    pm.expect(data.lastName).to.be.a('string');",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": 100,\n    \"idBook\": 2,\n    \"firstName\": \"Paul\",\n    \"lastName\": \"HARARI\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseAuthorsUrl}}/{{author_id}}",
					"host": [
						"{{baseAuthorsUrl}}"
					],
					"path": [
						"{{author_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Response body verification",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const getData = () => pm.response.json();  ",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check if data exists\", function () {",
							"    pm.expect(getData.data, \"data should not exist\").to.be.undefined;",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseAuthorsUrl}}/{{author_id}}",
					"host": [
						"{{baseAuthorsUrl}}"
					],
					"path": [
						"{{author_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Response time verification",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify response time is less than 5 seconds\", function () {",
							"    //const fiveSecondsMs = 5000; // 5 seconds in milliseconds",
							"    const fiveSecondsMs = 10000; // 10 seconds in milliseconds",
							"    pm.expect(pm.response.responseTime).to.be.below(fiveSecondsMs);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"foo\": \"bar\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseAuthorsUrl}}/100",
					"host": [
						"{{baseAuthorsUrl}}"
					],
					"path": [
						"100"
					]
				},
				"description": "This request has a test asserting that a response is received within a specific time limit (in this case 5 seconds). This is useful for ensuring consistent API performance.\n\nYou can access details of the response, such as response time, on the `pm.response` object. See the [response object documentation](https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#scripting-with-response-data) for other properties available."
			},
			"response": []
		},
		{
			"name": "Header verification",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify response headers have expected values\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"    //pm.expect(pm.response.headers.get(\"Content-Length\")).to.exist;",
							"    pm.expect(pm.response.headers.get(\"Server\")).to.exist;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseAuthorsUrl}}/1",
					"host": [
						"{{baseAuthorsUrl}}"
					],
					"path": [
						"1"
					]
				},
				"description": "This request has a test asserting that certain response headers are present or have an expected value.\n\nYou can access details of the response, such as headers, on the `pm.response` object. See the [response object documentation](https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#scripting-with-response-data) for other properties available."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"requests": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"requests": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseAuthorsUrl",
			"value": "https://fakerestapi.azurewebsites.net/api/v1/Authors"
		},
		{
			"key": "baseBooksUrl",
			"value": "https://fakerestapi.azurewebsites.net/api/v1/Books"
		},
		{
			"key": "author_id",
			"value": ""
		}
	]
}